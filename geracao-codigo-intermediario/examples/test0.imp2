//-------------------especificação de uso-------------------
// comentário ---> //
// declaração ---> var id_list = [1, 2, 3, ...];
// concatenação ---> id_list := id_list -> exp;
// append ---> id_list := id_list ++ id_list;
// projeção ---> id_list[exp]; 
// tamanho ---> #id_list 

//--------------adicionado no ebnf-------------------
//arr_conc = l1:exp op:"->" l2:exp ;                      //sintática da concatenação de lista
//arr_int = "[" e:exp {','e:exp}* "]" ;                   //sintática da declaração de lista
//arr_idx = idn:identifier"["e:exp"]" ;                   //sintática da projeção de lista
//arr_append = l1:exp op:"++" l2:exp ;                    //sintática do append de lista
//arr_asgn = idn:identifier"["idx:exp"]" op:":=" e:exp ;  //sintática da atribuição de lista

//---------------mudado no ebnf------------------------
//@@eol_comments :: /\/\/.*?$/                                                              // comentário com "//"
//exp = bin_exp | arr_conc | arr_idx | arr_append | paren_exp | un_exp | arr_int | @:atom ; // adição de arr_conc, arr_ind, arr_append e arr_int em exp
//atom_cmd = cond | loop | arr_asgn | assign | print | call | skip ;                        // adição de arr_asgn em attom_cmd

//--------------adicionado no impiler---------------------
//  def arr_int(self, ast):              //epilha a declaração de lista
//        if isinstance(ast.e, list):
//           return pi.ArrInt(ast.e)
//        return pi.ArrInt([ast.e])
//
//    def arr_idx(self, ast):            //epilha a chamada de projeção de lista
//        return pi.ArrIdx(ast.idn, ast.e)
//
//    def arr_append(self, ast):         //epilha achama de append de lista
//        return pi.ArrAppend(ast.l1, ast.l2)
//
//    def arr_asgn(self, ast):           //epilha a atribuição de lista
//        return pi.ArrAsgn(ast.idn, ast.idx, ast.e)
//
//    def arr_conc(self, ast):           //epilha a chamada de concatenação de lista
//        return pi.Conc(ast.l1, ast.l2)

//------------------mudado no impiler---------------------
//    def un_exp(self, ast):           // empilha o length usando # em un_exp além do not
//        if ast.op == "not":
//            return pi.Not(ast.e)
//        if ast.op == "#":
//            return pi.ArrLength(ast.e)

//---------------mudado no pi.py-----------------
// criada as classes ArrInt, ArrLength, ArrIdx, Conc, ArrAppend, ArrAsgn
// criado os eval e evalKW dessas respectivas classes e feito mudanças necessárias para o funcionamento do código
// as classes que mexem com index tem verificação de index out of range

// --------------------------------Exemplos----------------------------------------------

var l1 = [4,7,3,2,5], l2 = [6,1,3,7], l3 = [0], l4 = [0];
var x = 0, y = 10, idx = 1;
var troca = 1;


l1 := l1 -> y+2;         // adicioando o número 10 + 2 no final da lista l1 resp:[4,7,3,2,5,12]

l3 := l1 -> y+2;
print(l3);


l1 := l1 ++ l2;         // juntando a lista l1 com a l2 resp:[4,7,3,2,5,12,6,1,3,7]

l4 := l1 ++ l2;
print(l4);


// ordenando com bubble sort a l1 resp:[1,2,3,3,4,5,6,7,7,12]
while(troca == 1)
{
	troca := 0;
    idx := 1;
	while(idx < #l1)
	{
        if(l1[idx - 1] > l1[idx])
		{
            x := l1[idx];
            l1[idx] := l1[idx - 1];
            l1[idx - 1] := x;
            troca := 1
        };
        idx := idx + 1
	}
};

print(l1)

// Esse arquivo também está no GIT na pasta examples